using UnityEngine;

// 어댑터 패턴

// 0. 정의
// => 기존 인터페이스를 사용해 작동 할 수 없는 작업을 호환 가능하도록 함
// => 서로 호환되지 않는 인터페이스를 가진 클래스들이 함께 동작 가능함

// 1. 구성
// => 어댑터 베이스 : 클라이언트와 호환되는 인터페이스 정의
// => 어댑터 구현 : 어댑터 베이스를 상속받아 호환되는 작업을 구현하며 호환되지 않는 작업을 연결
// => 어댑티 : 클라이언트와 호환되지 않지만 호출 하고싶은 작업을 정의하여 어댑터에 연결 되도록 함

// 2. 장점
// => 유연성 : 기존 클래스 어댑티를 수정하지 않고 새로운 어댑터를 통해 기능을 확장 할 수 있음
// => 재사용성 : 어댑터를 사용하여 기존 클래스를 재사용 할 수 있으며, 다양한 어댑터를 이용해 다양한 인터페이스와의 호환 제공

// 3. 게임
// => 다양한 입력 지원 : 키보드, 마우스, 게임패드
// => 그래픽 렌더링 엔진 통합 : OpenGL, DirectX
// => 네트워크 프로토콜 변경 : TCP, UDP, HTTP
public class AdapterPattern : MonoBehaviour
{
    private void Start()
    {
        // 초기화
        AdapterBase adapter = new AdapterImplement();

        // 어댑터와 연결된 작업 호출
        adapter.CompatibleRequest();
    }
}

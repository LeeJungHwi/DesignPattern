using UnityEngine;

// 템플릿메소드 패턴

// 0. 정의
// => 알고리즘의 일부 구조를 하위 클래스에서 구현하도록 함
// => 알고리즘의 구조를 변경하지 않고 하위 클래스에서 특정 구조를 재정의 할 수 있게 함

// 1. 구성
// => 클래스 베이스 : 알고리즘의 기본 구조를 정의 하고 일부 함수를 추상함수로 선언하여 하위 클래스에서 구현을 강제함
// => 클래스 구현 : 클래스 베이스를 상속받아 추상 함수를 구현함

// 2. 장점
// => 코드 재사용성 : 공통 부분을 베이스에 정의하고 변하는 부분만 하위 클래스에 구현하도록 함으로써 코드의 재사용성을 높임
// => 유연성 : 알고리즘의 구조를 변경하지 않고 하위 클래스에서 특정 구조를 변경 할 수 있음
// => 유지보수 용이성 : 알고리즘의 기본 구조가 한 곳에 정의되어 있어 새로운 하위 클래스를 추가하여 기능을 확장하는 등 유지보수가 용이함

// 3. 게임
// => 게임 캐릭터의 행동 정의 : 기본적인 행동인 이동과 공격은 추상 클래스에 정의하고 각 캐릭터별로 다른 행동 방식을 하위 클래스에서 구현
public class TemplateMethodPattern : MonoBehaviour
{
    private void Start()
    {
        // 초기화
        ClassBase a = new ClassImplementA();
        ClassBase b = new ClassImplementB();

        // A 연산
        a.ExecuteOp();

        // B 연산
        b.ExecuteOp();
    }
}

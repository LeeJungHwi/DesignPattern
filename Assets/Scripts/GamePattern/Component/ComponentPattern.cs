using UnityEngine;

// 컴포넌트 패턴

// 0. 정의
// => 한 객체의 각 기능을 분리하여 관리

// 1. 구성
// => 컴포넌트 베이스 : 모든 컴포넌트 공통 멤버 정의
// => 인풋 컴포넌트 : 입력 처리 멤버 정의
// => 물리 컴포넌트 : 물리 처리 멤버 정의
// => 렌더링 컴포넌트 : 렌더링 처리 멤버 정의
// => 플레이어 컴포넌트 : 각 기능 구현
// => RPG : 각 기능를 관리하며 처리

// 2. 장점
// => 모듈화 : 각 기능을 독립적인 모듈로 분리하여 관리
// => 재사용성 : 특정 기능을 다른 객체에 재사용
// => 유연성 : 새로운 기능이 다른 기능에 영향을 주지 않음
// => 유지보수성 : 각 기능이 독립적이므로 테스트와 디버깅이 쉬움

// 3. 게임
// => 플레이어 객체 관리 : 플레이어의 입력, 물리, 렌더링 처리를 각 컴포넌트로 관리
public class ComponentPattern : MonoBehaviour
{
    // 게임 시작
    RPG rpg = new RPG();

    private void Start() { rpg.Start(); }
    private void Update() { rpg.Update(); }
}
